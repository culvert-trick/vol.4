= 私がテストをするときに考えていること

//info{
著者：カルバート
//}

//lead{
こんにちは。カルバートと申します。テストエンジニアという肩書でお仕事をしています。今回は、普段私がテストをするときに考えていることを書き出してみました。これらの内容が、ほんの少しでも皆さまのテストを良くする一助となれば幸いです。
//}

== はじめに
テストが担う役割はいくつかありますが、私なりにそれらをひと言で表すと、「情報をつたえる」となります。こう書くとなんだか唐突な感じがあって乱暴に聞こえるかもしれないのですが、少しずつお話しさせていただきます。開発者をはじめとする関係者は、ソフトウェアが理想の姿になっているかを判断するための情報や、ソフトウェアが変な動きをしていないかといった情報を必要としています。テストは、それらの情報を関係者に対して必要十分に届けるための仕組みです。もしテストが無ければ、「このソフトウェアはちゃんと動いているのか？」「このソフトウェアを自信をもって世の中にリリースできるだろうか？」という問いに答えることはできません。

=== 1.1 理想を言語化する
まず、ソフトウェアの理想を形にするところからお話を始めます。ソフトウェアが理想の姿になっているかを判断するための情報を得るためには、まず理想の形を言葉にする必要があります。これが結構難しいです。例えば、画面上に表示されたリンクをクリックすると別の画面に遷移するという要件があるとします。このとき、ただリンク先の画面が表示されれば良いというものではなく、暗黙的な期待がいくつも存在します。何秒以内に表示されてほしい、ユーザーがその画面を訪れた記録を残してほしい、安全に通信して欲しい、何らかの問題が発生したときはエラーを表示してユーザーの行動を導いてほしい、アクセスが集中しても耐えてほしい、などなど。これらの期待を逐一言語化することで、テストをするための土台が整っていきます。これらをざっくり「〇〇が正しいこと」と括ってしまうのは、アンチパターンだと考えます。期待を明示的にテストできないからです。

=== 1.2 よくコミュニケーションする
期待を言語化するためには、関係者間のコミュニケーションをよく行うことが大事だと考えています。関係者は、必ずしも明示的な期待を持っていません。いわゆる開発者と呼ばれるエンジニア、営業などビジネス知識のエキスパート、デザイナー、インフラ担当者、果ては会社の社長まで、そのソフトウェアに対する期待を持っている関係者と対話し、暗黙的な期待を少しずつ言語化していきます。関係者の期待を説明する手段としてドキュメントが用いられることもありますが、その場合でも必ず関係者同士で一緒に解釈することが望ましいです。書かれている文字は同じでも、人によって解釈が異なってしまうことはよくあります。時間を作って対話することが大事です。また、ドキュメントではなく動いているソフトウェアを用いる場合も同様です。求める情報がどれだけ厳密かにもよりますが、ドキュメントを読むだけ、ソフトウェアを動かしただけで、関係者の期待や現行の仕様が正確に把握できるという考え方は危険です。

=== 1.3 一言一句にこだわって言語化する
関係者の合意が概ね形成できたら、いよいよそれらを言語化していきます。このとき、言葉の選び方には非常に気を付けています。言葉の解釈は個々の人間によって意外と異なっていますので、安易な表現を迂闊に使うと誤解を招き、後のトラブルの原因となります。辞書の定義だけでなく、関係者間での共通認識も考慮して言葉を選んでいく必要があります。ここでのアンチパターンは、既存のドキュメントなどに使われている言葉をそのまま用いることです。関係者に必要十分な情報を届けることができる言葉になっているか？という目で、言葉を厳しくチェックしていくことが大事だと考えています。

=== 1.4 ソフトウェアに期待しないことも言語化する
ソフトウェアに対する期待が言語化できたら、その逆、ソフトウェアに期待しないことも言語化していきます。例えば、お金が誤って一桁多く引かれてしまうとか、飛行機の座席をダブルブッキングできてしまうとか、そういうものです。私の場合は、「(当然ある前提のデータがもし無かったとしたら)(期待していない形式のデータが扱われたら)(万が一、ユーザーがこんな行動をしたら)どうなりますか？」という問いかけをよく使います。何となく、この分野を得意とするテストエンジニアが多いと感じています。開発者と呼ばれるエンジニアも、訓練すれば上手に問いかけができるようになると思います。一般的に、開発を進めているときの頭の使い方は、情報を必要最低限に絞って、それ以外のことを考えない状態になっています。ある程度の時間を取り、頭のモードを切り替えて思考を発散させると、問いかけが生まれやすくなるのではないかと思います。

== 1.5情報を伝えるための仕掛けを作りこむ
ソフトウェアに対する期待と、逆にソフトウェアに期待しないことが言語化できたら、次は仕掛けづくりをします。魚を獲るときに網を張るようなイメージで、ソフトウェアから情報を得るための網を作ります。この網を作る作業を、一般的にテスト設計と呼んだりします。船に載せられる網が有限であるのと同様、テストに使える網も有限です。一般的に「テスト技法」と呼ばれるテクニックを使いながら、どのような細かさの網をどこに投げるつもりなのか、というイメージで、広さと深さ、網の目の細かさを見極めながらテストを作りこんでいきます。テスト技法といえば、同値分割や境界値分析は基本情報技術者試験で習うので、何となく使いこなせている人も多いと思います。技法ごとに目的や使いどころが存在するので、うまく使い分けをすることが大事です。技法の詳しい話はまた別の機会に書きたいと思います。

== 1.6 作った仕掛けを、優先順位を見極めながら配置する
情報を得るための仕掛けができたら、優先順位を見極めながらテストを配置していきます。1.5の段階では魚を獲る網を完成させたイメージで、1.6の段階では、網を、いつ、どこに、どのような順序で設置していくかといったことを考えます。一般的には、リスクを判断材料として優先順位を見極めることが多いです。ソフトウェアの根幹に関わるような情報を得るためのテストは先に行ったり、頻繁に繰り返し行ったりします。些末なテストにリソースを使いすぎるのは望ましくありません。私はリスクの他に、直感に頼ることもあります。テストの実行順序を決定するほか、テストの実行に必要となる環境の構築、データの作成、スケジュールの調整などがここで実施するタスクです。

== 1.7 テストを実行して、必要な情報を得る
最後に、テストを実行します。ここまでの一連のプロセスで組み立ててきた流れをふりかえりながら、必要十分な情報が取れているかを判断します。テストを実行した結果、もし必要十分な情報が取れていなければ、テストの構築プロセスのどこかに誤りがあったことになります。適切に情報が取得できたと判断できたら、関係者に情報を展開し、必要に応じて様々な意思決定を行います。

== 1.8 道具を選ぶ
1.7までは時系列的に記述しましたが、1.8はおまけです。テクノロジーや方法論は日々進化しています。テストに用いる道具も、日々アップデートしていく必要があります。特にテストの実行に関しては、ツールの恩恵を大きく受けられる時代になりました。今後もAIの発達などによりツールが大幅に進化していくことが予想されます。日々情報をキャッチアップし、道具を適切に入れ替えていくことが大切です。何が適切かという点については、実際にやってみて気付くことも多いので、ある程度良さそうだと判断したら、小さく素早く取り込んでいくことが理想です。相応の労力を伴うので、あまり頻繁にやると疲れちゃいますけどね。

== おわりに
ここまでお読みいただき、ありがとうございました。私は長年、いわゆるウォーターフォール的な文化の環境で生きてきました。半年ほど前に転職し、現在はアジャイル的な文化の環境で生きていますが、テストの根幹は今も昔も変わらないと感じています。今後も少しずつ、日々感じたことなどを発信していきたいと思います。

