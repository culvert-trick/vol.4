= 開発者とQAがともにつくるテスト

//info{
著者：ブロッコリー
//}

//lead{
開発者は実装のことを考えることがあっても、テストに関することを考えることが少ないです。その部分をテストエンジニアが支えながら開発していく例を紹介します。
//} 

== はじめに
皆さんはテストエンジニアやQA（Quality Assurance=品質保証）という役職を聞いて、どんなイメージを持ちますか？

  * 開発者が指示したテストを実施してくれる人
  * リリースの判定をするための門番みたいな人
  * 実装コードのことはよくわかっておらず、製品を好き勝手に触る人

と、あまり開発者と対立構造を持って接しているように感じている人も多いかもしれません。

この章では、上記のような接し方とは全く違う、テストエンジニアやQAが開発者とともにつくる世界を紹介します。

== QAの新しい考え方
書籍『Agile Testing Condensed』ではQAの新しい考え方として「QA＝Quality Assurance」ではなく「QA=Question Asker」ということを提案しています。

つまり、良き質問者としてQAが存在するということです。

== 開発者とQAがともにつくるためのプラクティス
開発者とQAがともにつくるために、モブプログラミングを行なうことがあります。

=== モブプログラミングとは
2012年頃にアメリカの会社で取り組みが始まった方法です。

以下のようなルールで行われます。

  * 6名前後で行う
  * 1つの画面と1つのコンピュータを用いる
  * 1人がコンピュータを操作する（ドライバー役）
  * 残りの人たちが、ドライバー役の人にこれから行う内容（実装方法など）を指示する（ナビゲーター役）
  * 時間等の区切りごとでドライバー役は交代する

他にもやり方によって変わったりするのですが、基本的なルールは上記の通りです。

== 今回紹介するモブプログラミングの内容
今回は「WACATE」というワークショップ形式のイベントの中でモブプログラミングを体験してもらいました。

今回の題材は以下の通りです。

  * お題…自動販売機
  * 使用した言語など…CucumberとJavaを使ってATDDで作成

== テストシナリオが出来上がっていく過程

分科会の中で出来上がったテストシナリオを、その過程を含めて紹介します。なお、実装コードは今回記載しません。

=== シナリオその1：100円の入金を確認する

まず、雛形として以下のシナリオを用意しました。

//list[Cucumber01][最初のテストシナリオ]{
  Scenario: 入金額確認
    Given 自動販売機がある
    When 100円を入金
    Then 100円が入金されている
//} 

このシナリオが動くように、実際にテストコードを書き、実装コードを書きました。

=== シナリオその2：100円を入れた後に50円を入れても対応できるようにする。

次に以下のようなシナリオを考えました。

//quote{
「お金を100円入れた後に、50円を入れたら、ちゃんと150円になるようにしてほしいな」
//}

その結果、テストシナリオは以下のようになりました。

//list[Cucumber02][2つ目のテストシナリオ追加]{
  Scenario: 入金額確認
    Given 自動販売機がある
    When 100円を入金
    Then 100円が入金されている

  Scenario: 入金額確認
    Given 自動販売機がある
    When 100円を入金
    And 50円を入金
    Then 150円が入金されている
//}

最初にあったテストシナリオをコピペして、「And 50円を入金」を追加しただけです。

その後、このテストシナリオが通るように実装コードを修正しました。コードのリファクタリングも数箇所行いました。

=== シナリオその3：1円硬貨はカウントしないようにする

続いて、以下のようなシナリオを考えました。

//quote{
「1円硬貨は対応したくないです。」
//}

その結果、テストシナリオは以下のようになりました。

//list[Cucumber03][3つ目のテストシナリオ追加]{
  Scenario: 入金額確認
    Given 自動販売機がある
    When 100円を入金
    Then 100円が入金されている

  Scenario: 入金額確認
    Given 自動販売機がある
    When 100円を入金
    And 50円を入金
    Then 150円が入金されている

  Scenario: 入金額確認
    Given 自動販売機がある
    When 1円を入金
    Then 0円が入金されている
//}

最初にあったテストシナリオをさらにコピペして、1円を入金した場合に「入金状態が0円になっている＝1円には対応しない」という状態を追加しただけです。

その後、このテストシナリオが通るように実装コードを修正しました。コードのリファクタリングもさらに数箇所行いました。

== テストエンジニアはどの部分が気になり、どのように指摘するのか

ここまで終わった後、テストエンジニアの思考と発言が話題になりました。

=== テストエンジニアは指摘事項を言い切るべきか

以下のような話が出てきました。

//quote{
開発者はテストのことが分かってない部分が多いので、@<b>{テストエンジニアにはもっと言い切りの形で言ってほしい}
//}

私は上記の話には半分賛成、半分反対です。

確かに、テストエンジニアはテストの知見が多いので、その頼りに応えるために発言するのは重要です。その一方で、コードを書く主体は開発者だとも思っています。なので、提案はしつつも開発者に最終的な判断を任せることが多いです。

=== 話す内容に強弱をつける

Crabinkのvol.2でも、以下のように書いたのですが、モブプロやレビュー時に私からは「指摘」ということはあまりせず、@<b>{「質問による深掘り」}を多く行います。

その時に重要視しているのは、優先度をつけて言う・言わないではなく、@<b>{発言時に強弱をつけて伝える}ようにしています。((これは元々無意識でしたが、レビューやモブプロを考えた時に、そうしているなと感じたことです))

== 今回の題材を改善する

例えば、今回の題材となるテストシナリオ（以下）では、次のような会話をしました。

=== 題材

//list[Cucumber04][会話の題材となるテストシナリオ]{
  Scenario: 入金額確認
    Given 自動販売機がある
    When 100円を入金
    Then 100円が入金されている

  Scenario: 入金額確認
    Given 自動販売機がある
    When 100円を入金
    And 50円を入金
    Then 150円が入金されている

  Scenario: 入金額確認
    Given 自動販売機がある
    When 1円を入金
    Then 0円が入金されている
//}

=== 会話内容

  * 私「このシナリオって、すべてシナリオ名が『入金額確認』になってますよね。@<b>{同じ名前はどうかと思うので変えたほうが良い}気がしてます。（★1）」
  * 開発者「なるほど。そしたらこんな感じですかね。（テストシナリオを編集する）」

//list[Cucumber05][テストシナリオ改良その1]{
  Scenario: 1回投入時の入金額確認
    Given 自動販売機がある
    When 100円を入金
    Then 100円が入金されている

  Scenario: 2回投入時の入金額確認
    Given 自動販売機がある
    When 100円を入金
    And 50円を入金
    Then 150円が入金されている

  Scenario: 使用不可の硬貨投入
    Given 自動販売機がある
    When 1円を入金
    Then 0円が入金されている
//}

  * 私「なるほど。ちなみに、@<b>{2つ目のテストの意図}ってなんですかね？（★2）」
  * 開発者「これは、コインを1回だけではなく、2回投入した時にもちゃんと動くか確認したいという意図です。」
  * 私「なるほどー。そしたら、『2回のコイン投入』と書いていますが、@<b>{3回目はどうなるのでしょうか？}（★3）」
  * 開発者「3回目は2回目と同じく、加算されていく仕組みなので、ロジック上は大丈夫です。」
  * 私「ということは、@<b>{気にしているのは2回のコイン投入ではなく、複数回のコイン投入}なんですね。」
  * 開発者「なるほど、そしたらこんな感じにした方が良いですかね」

//list[Cucumber06][テストシナリオ改良その2]{
  Scenario: 1回投入時の入金額確認
    Given 自動販売機がある
    When 100円を入金
    Then 100円が入金されている

  Scenario: 複数回投入時の入金加算額確認
    Given 自動販売機がある
    When 100円を入金
    And 50円を入金
    Then 150円が入金されている

  Scenario: 使用不可の硬貨投入
    Given 自動販売機がある
    When 1円を入金
    Then 0円が入金されている
//}

=== 会話における発言の意図

…いかがでしたでしょうか。

この会話は、★1、★2、★3で私の発言の強弱が変わっています。

==== ★1「同じ名前はどうかと思うので変えたほうが良い」

この発言は、完全に指摘に近い提案になっています。これは誰が見ても直したほうが良いと思うからです。

==== ★2「2つ目のテストの意図ってなんですかね？」

この発言は、開発者に思考を委ねています。

これは、自分が考えているテストの意図とは違った場合に私の提案は見当違いになることが多く、その時点で提案しても意味がないと判断しているからです。

あくまでも@<b>{開発者自身にテストの意図を考えてもらうことが大切}です。

今回の場合、開発者が気にしていたのは

  * 「2回のコイン投入」ということ
  * 「100円硬貨以外に50円硬貨も投入できる」ということ

のどちらも考えられます。

どのような意図なのかは私が伝えることではなく、開発者が自分で気付くことです。もしくはモブプログラミングのようにチームで行なっている場合、チームみんなで共通認識を持つ必要があります。

==== ★3「『2回のコイン投入』と書いていますが、3回目はどうなるのでしょうか？」

この発言は、私の考え「2回目も3回目も同じ仕組みなのでは？」も含んだ上での質問になっています。

「コインを1回だけではなく、2回投入した時にもちゃんと動くか」という開発者が発言したテストの意図は、以下の2通りのテストの意図に分けられます。

  * コイン投入が1回だけでない（複数回投入した）場合
  * コイン投入を2回（特定の回数）の場合

そして、私は「コイン投入が1回だけでない（複数回投入した）場合」というテストの意図の方が、今回のテストシナリオで考えているものだと感じました。

なので、確認の意味も含めて「『2回のコイン投入』と書いていますが、3回目はどうなるのでしょうか？」という発言をしました。

最終的に、テストシナリオ名をより良いものにできたと実感しています。

== おわりに
今回はテストエンジニアやQAが「ただテストする」とは全く違う世界を紹介しました。
さらに、この話は実装がまだ終わっていなくてもできる議論であり、Scrum開発でいうPlanningの段階から議論できることを分かってもらえるでしょう。

現在、QAとして働いている方はこのような動き方を、開発者として働いている方はQAとの歩み寄りを目指してみてはいかがでしょうか？

