= おまえらがテストを嫌う理由

//info{
著者：halspring(@halspring_qa)
//}

//lead{
テストは好きですか？

//} 

== 私はテストが好きである
どうも、halspringと名乗っているものです。
早いもので、テストの世界に足を踏み入れて2年が経とうとしています。

前提として、私はテストが好きです。
元々、テストに対して特別良いイメージは持っていませんでした。
しかし今ではテストが好きで、テストを嫌う方々にテストの魅力や良さを知って頂きたく、
同時にテストに関する誤解や勘違いを払拭して向き合ってほしいと思っています。

もしテストのことを嫌っているのであれば是非好きになるきっかけになれば、
既にテストが好きであれば、周囲のテスト嫌いに理解してもらうためのヒントになればと思います。

== 本当にテストが悪いのか
まず第一にテストを嫌っている人は、本当に「テスト」を嫌っているのでしょうか？

テストを嫌いな理由はなんでしょうか？

テストが嫌いなのではなく、テストの周囲にある何かが原因なのではないかと思います。
例えば、よく聞く話が「方眼紙スクショペタペタ」です。
それはテストが悪いのでしょうか。
意味のない(本当に意味がないのかはわかりませんが)作業を共用する文化が悪いのではないでしょうか。
犯人の部屋にゲームが多かったからといった理由でゲームを規制するように、テストを嫌いになっていませんか。

実際に周囲から聞いたことのある声や想像から、テストの周囲に蔓延る原因をいくつか挙げていきます。

== テストを知らない
根本的なところですが言語やフレームワーク、設計のことは学んでいてもテストのことを学んでいないケースは少なくありません。
基本的なところではテストレベルやテストタイプのこと、
他にもテスト技法やテスト戦略、テストプロセス、テストの7原則など、ざっくり聞いたことはあっても説明できるでしょうか。
プログラマの美徳に怠惰がありますが、テストについても同じことです。
無駄、面倒から脱却するために、効率的にテストをする方法を知る必要があります。

=== テスト仕様書にはなにをかくのか
テスト仕様書にはどんな項目がありますか？

テスト手順、期待結果だけの組織もあれば、
テストタイプ、画面名・機能名、テスト観点、テスト条件、前提条件、テスト手順、期待結果、テスト環境などなど多くの項目を持つ組織もあるでしょう。
どちらが正しいということは断言できませんが、
この場合は後者の項目がしっかりと書かれていればレビューをするときに漏れを見つけやすいですし、情報を整理しやすいでしょう。

さて、テストケースひとつひとつの意味や目的をきちんと汲み取りやすいのはどんなテスト仕様書でしょうか。
冗長なテストケースや、テストケースの不足を見つけやすのはどちらのテスト仕様書でしょうか。
そのようなテスト仕様書になっているでしょうか。
テストを実行するとき、そのテストの意味を稽えることができるでしょうか。

=== なんでも自動化すればいいと思っていないか
テストはすべて自動化してしまいたい、そんな声も少なからずあると思います。
さて、すべてのテストを自動化することは可能でしょうか。

結論としては、不可能だと思います。
そもそもすべてのテストというのが不可能なのですが、
仮に「すべてのテスト」というものが計画・設計できたとしましょう。
これをすべて自動テストにすることにメリットはあるのでしょうか。

自動テストのメリットはどこにあるのか、考えたことはあるでしょうか。
自分が思うに再現性と繰り返し実行ができることです。
何度も繰り返し行うようなリグレッションテストとは相性が良いと思います。

ではデメリットはどうでしょうか。
良いことばかりを考え、夢、ファンタジーの世界を想像してはいないでしょうか。
テストを自動化することで、保守のコストが発生します。コケたときに分析が必要になります。
自動化する際に誤りが混入する可能性があります。
手動で実行したほうが早いテストを自動化してもそれは効率的ではありません。
手動で実行しても意味のないテストを自動化してもそのテストに意味はありません。
戦略なき自動化は破滅の道を進むことになります。

== 開発しながら既にテストをしている
=== レビュー
=== 探索的テスト
また、なぜテスト仕様書を書いているのかを考えてみると良いと思います。

=== テスト駆動開発
開発のためのもの
保証のためのものではない
だからテストは必要

== 目的がない意味がない
=== 戦略がない筋が悪い
同じようなテストを何度もしていないか
既に確認したこと、別で保証していることを、つまり意味のないテストをしていないか

=== 巷に蔓延る方眼紙の闇
冒頭で言ったやつ
あれやめてほしい
納得せずにやる方も悪い、考えて実施して

== 連携できていない
開発とテストがバラバラ
そりゃ嫌いになるよ

== 100%にしたい
知人にもいた
100%は証明できない
ならば、100%不具合のないソフトウェアを開発すればよい
できないのなら、100%に寄せていくしかない

== テストを好きになるために
現場や会社の事情はある
変えられないことを嘆いていても仕方がない
変えられるところから変えるしかない

