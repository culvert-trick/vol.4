= おまえらがテストを嫌う理由

//info{
著者：halspring(@halspring_qa)
//}

//lead{
テストは好きですか？

私はテストが好きです。
テストが嫌いな人も多いでしょう。しかし、それはテストが嫌いなのでしょうか。
//} 

== 私はテストが好きである
どうも、halspringと名乗っているものです。
早いもので、テストの世界に足を踏み入れて2年が経とうとしています。

前提として、私はテストが好きです。
元々、テストに対して特別良いイメージは持っていませんでした。
しかし今ではテストが好きで、テストを嫌う方々にテストの魅力や良さを知って頂きたく、
同時にテストに関する誤解や勘違いを払拭して向き合ってほしいと思っています。

もしテストのことを嫌っているのであれば是非好きになるきっかけになれば、
既にテストが好きであれば、周囲のテスト嫌いに理解してもらうためのヒントになればと思います。

== 本当にテストが悪いのか
まず第一にテストを嫌っている人は、本当に「テスト」を嫌っているのでしょうか？

テストを嫌いな理由はなんでしょうか？

テストが嫌いなのではなく、テストの周囲にある何かが原因なのではないかと思います。
例えば、よく聞く話が「方眼紙スクショペタペタ」です。
それはテストが悪いのでしょうか。
意味のない(本当に意味がないのかはわかりませんが)作業を共用する文化が悪いのではないでしょうか。
犯人の部屋にゲームが多かったからといった理由でゲームを規制するように、テストを嫌いになっていませんか。

実際に周囲から聞いたことのある声や想像から、テストの周囲に蔓延る原因をいくつか挙げていきます。

== 100%にしたい/正解がない
私の知人にいたのですが、すべてをテストすることが不可能であることが不満と語っていました。
また、これが絶対に正しいやり方、正しいテストと言い切れないことに不満を持つ知人もいました。

私が思うに、これらはテストを勉強したくない、設計したくない言い訳です。
既にテスト以外のことでテストに抵抗を感じているのだと思います。

テストでは、バグがあることは示せますがバグがないことを示すことはできません。
完璧なテストというものを目指しても、それは実現することができないのです。
ここでひとつ朗報があります。
100%のテストができないことをテストをしたくない理由にするならば、
100%不具合のないソフトウェアを開発すればよいのです。
極論ですが、100%問題のないシステムを開発できるのであればテストは不要ですよね。
しかし、そんなソフトウェアを作ることはできません。
また、仕様通りに作っていれば問題がないのでしょうか。
仕様書になくても満たさなければいけないものもあり、またそれは時代によっても変わります。
正しいソフトウェアとは、正しい実装とは正しいソフトウェア開発とはなんでしょうか。
100%問題のないソフトウェアを開発できないのに、100%にできないからとテストを拒むのは奇妙な話だと思いませんか？

きっとテストに対して抵抗を持っている理由は別にあります。
表面的な気持ちだけではなく、なぜ抵抗があるのかをしっかりと考えてみてください。

== テストを知らない
根本的なところですが言語やフレームワーク、設計のことは学んでいてもテストのことを学んでいないケースは少なくありません。
基本的なところではテストレベルやテストタイプのこと、
他にもテスト技法やテスト戦略、テストプロセス、テストの7原則など、ざっくり聞いたことはあっても説明できるでしょうか。
プログラマの美徳に怠惰がありますが、テストについても同じことです。
無駄、面倒から脱却するために、効率的にテストをする方法を知る必要があります。

=== テスト仕様書にはなにをかくのか
テスト仕様書にはどんな項目がありますか？

テスト手順、期待結果だけの組織もあれば、
テストタイプ、画面名・機能名、テスト観点、テスト条件、前提条件、テスト手順、期待結果、テスト環境などなど多くの項目を持つ組織もあるでしょう。
どちらが正しいということは断言できませんが、
この場合は後者の項目がしっかりと書かれていればレビューをするときに漏れを見つけやすいですし、情報を整理しやすいでしょう。

さて、テストケースひとつひとつの意味や目的をきちんと汲み取りやすいのはどんなテスト仕様書でしょうか。
冗長なテストケースや、テストケースの不足を見つけやすのはどちらのテスト仕様書でしょうか。
そのようなテスト仕様書になっているでしょうか。
テストを実行するとき、そのテストの意味を稽えることができるでしょうか。

=== なんでも自動化すればいいと思っていないか
テストはすべて自動化してしまいたい、そんな声も少なからずあると思います。
さて、すべてのテストを自動化することは可能でしょうか。

結論としては、不可能だと思います。
そもそもすべてのテストというのが不可能なのですが、
仮に「すべてのテスト」というものが計画・設計できたとしましょう。
これをすべて自動テストにすることにメリットはあるのでしょうか。

自動テストのメリットはどこにあるのか、考えたことはあるでしょうか。
自分が思うに再現性と繰り返し実行ができることです。
何度も繰り返し行うようなリグレッションテストとは相性が良いと思います。

ではデメリットはどうでしょうか。
良いことばかりを考え、夢、ファンタジーの世界を想像してはいないでしょうか。
テストを自動化することで、保守のコストが発生します。コケたときに分析が必要になります。
自動化する際に誤りが混入する可能性があります。
手動で実行したほうが早いテストを自動化してもそれは効率的ではありません。
手動で実行しても意味のないテストを自動化してもそのテストに意味はありません。
戦略なき自動化は破滅の道を進むことになります。

== 開発しながら既にテストをしている
開発をしている中で、意識していないところでテストをしていると考えています。
それがひとつの要因となり「テストは無駄」「もう充分確認した」といったイメージを抱いてしまいます。

=== レビュー
少なくともJSTQBの定義ではレビューは静的テストに分類されます。
仕様書のレビューも設計のレビューもコードレビューも、すべてテストです。
一般にテストと聞いてイメージするようなテスト(動的テスト)の前に、静的テストをしているのです。

既に色々なことを考慮した上で実装をしていることになるわけですから、
確かにその後のテストが億劫に感じるかもしれません。
しかし、それぞれ目的が異なることを理解しなければいけません。

=== 探索的テスト
探索的テストをご存知でしょうか。
ざっくり説明すると、経験則に基づくテストのひとつで、テストケースを用いずに動的にテストを設計しながら実行、学習を繰り替える方法です。
開発しながら、これらのことを自然としているのです。
コードを書き終わって一度も動作確認をせずにプルリクエストは出しませんよね。
必ずその前に手元で実行して動作を確認しているはずで、さらには異常値を扱ってみたりと問題が起きていないか操作することはないでしょうか。
その後のテストが億劫になる理由として、既に考えて検証したり気がついて直した箇所を再度検証しなければいけないから、と考えられませんか。

もしその可能性があるなら、その後のテストはどうすれば良いのか考えてみてください。
たとえば、他に異常値の漏れがないか、修正中に新たな不具合を作り込んでいないか、直そうと思って直すのを忘れていないか。
実装時の自分とテストを設計する自分は別の人間だと思ってください。
実装に手を加えているときにテスト技法を使って組み合わせを考慮したでしょうか、境界値を意識していたでしょうか。
コードに落とし込むときに抜けていた観点や実装がなかったか、時間を置いてから考え直すことに意味はないでしょうか。

また、なぜテスト仕様書を書いているのかを考えてみると良いと思います。
自分が思うに、コードの中にコメントを残す作業に似ています。
テスト仕様書を見直したときに、何を意図していたのかわかるように書いているのです。
同じようにテストを再現できるように書いているのです。
過去の自分がどのような意図でこの実装にしたのかわからないと、後々面倒なのと同じように、
過去にどのような意図でテストが行われ、どこが問題なくどこに問題があったのか、どこをテストしてどこをテストしていないのか、
それらを明らかにしておくことに意味があるのです。

=== テスト駆動開発
テスト駆動開発を行っていて、ユニットテストを作っているのだからテストは不要と主張する人もいるかもしれません。
さて、提唱者のKent Beck氏はテスト駆動開発について、品質保証の活動のために先にユニットテストを書くのだと語っていたでしょうか。

一字一句彼の本を読み直しながら確かめるのは面倒なので行いませんが、自分の認識ではそうは主張していません。
（もしかしたら少しくらいは品質保証に触れているかもしれませんが、）
テスト駆動開発におけるユニットテストは品質を保証するためのものではなく、開発を安心して一歩一歩進められるために動作を保証してくれるものです。
たとえば、ここで書いているテストコードでカバレッジを意識していますか。
意識していないとしたら、そのテストは品質を保証するためのテストとして充分でしょうか。

== 目的がない/意味がない
=== 戦略がない
同じようなテストを何度も実施していないでしょうか。
ユニットテストで担保しているロジック部分のテストをシステムテストで改めてテストしていませんか。
機能テストで担保するはずのテストを互換性テストに含めていませんか。
もちろん、それが必ずしも間違いではありません。
そこに戦略があり、合意があり、目的があり、意味があるのならばそれは正しいテストです。

しかし、戦略もなく意図もないテストであれば話は別です。
同じ手順のテストケースがあったとして、目的があるのかないのかでは効果もモチベーションも全然違います。
テストが悪いのではなく、戦略を持たずにテストが行われていることが悪いのです。

=== 巷に蔓延る方眼紙の闇
冒頭で少し触れたアレです。
よくある「テストは新人がやる」「方眼紙にスクショをペタペタするだけ」と呼ばれるパターンのものです。
ここまで読んでくださっていればわかると思いますが、テストは決して簡単ではありません。
意味のないテストを強いられているのであれば、それはテストが悪いのではなく環境が悪いのです。
私は学生時代、twitterや掲示板に蔓延るこれらの愚痴を見て、良いイメージを持てずにいました。
（テストに限らず、IT業界に対してもですが。）

どうか、テストを悪く思わず、テストを悪く言わないで頂きたいものです。

== テストを好きになるために
現場やチームには良くも悪くもそれぞれ様々な事情があります。
もちろん、組織レベルの問題で変えられないこともありますし、そこに起因してテストが嫌になっているかもしれません。
しかし、変えられないことを嘆いていても何も改善されません。
テストコードを書けるようなシステムではない？ 別の戦略、別のアプローチがあるでしょう。
会社がここを直してくれないと、システムを一度作り変えないと、契約先が、国が時代がと、いくらでも言い訳を作ることはできてしまいます。
しかし、それは自分だけでもできることをやらない理由にはなりません。
小さいところからでも、変えられるところから変えるしかないのです。
小さな歯車でもひとつ変えれば少しずつ変化が起きていくはずです。まずは手元の小さな歯車から変えてみるのはいかがでしょうか。

偉そうな文章になってしまいましたが、お読み頂きありがとうございました。


