= カイゼンしなかったジャーニーをふりかえる

//info{
著者：@koooooooooooki
//}

//lead{
自分が良かれと思っていたカイゼンがうまくいかないことで悩んだことはありませんか?
また、「あの時、ああやっておけばよかったなぁ・・・」と後悔することはありませんか?
今回、自身が行ったカイゼンと失敗を赤裸々に告白します(笑)
自身が行ったカイゼンをふりかえり、次はどうしたらよいか考えてみました。
//} 

== 私のカイゼンジャーニー

これは、2011年6月~2019年12月まで勤めた会社で行ってきた事例の一部になります。
前職はいわゆる組み込み系の会社です。
ソフトウェアのQA部門がなかったため、開発チームがテストしてリリースしていました。

また、オブジェクト指向開発やテスト駆動開発のような開発手法やテストをキャッチアップしている人があまりいない状況で、当時の上司から期待されていました。
ただ、今となっては様々な手法を知って実践しているし、誰かに相談する事で、より良い答えを見出すことができますが、
当時は知識も経験もない、社内外に相談相手もいない状態で、とにかく一人で試行錯誤していましたね(苦笑)


=== TOCfEのブランチ

ブランチは、@<b>{原因と原因の因果関係を、箱と矢印を使って見える化する}思考ツールで、付箋とペンさえあれば、次のような手順で作ることができます。

//listnum[Procedure for Branch][ブランチ作成手順]{
起こった出来事を、１つずつ付箋に書きだす。
書き出した付箋を、原因と結果の関係で下から上方向に順番に並べる。
「もし(原因)であれば、結果として(結果)である。」と声に出して読んでみて、違和感がなければ矢印で結ぶ。原因が複数ある場合は、「もし(原因1)かつ(原因2)であれば、結果として...」のように、「かつ」を使って読む
違和感があれば、付箋の内容を書き換えたり、原因となる付箋を足したり、付箋の順番を変えたりする。
//}

== 開発プロジェクトのカイゼン

開発プロジェクトに加わった時は、様々な問題が起きていました。
それらの問題が原因によって、次のような問題が引き起こされていたと思っています。

 * リリース時にテスト工数が少なくなる
 * リリース時のテストが不十分になる
 * 客先で不具合が発見される

開発プロジェクトに起こっていたことを全体をブランチで表すとこんな感じになります。

//image[branch][開発プロジェクトのブランチ][scale=0.8]{
//}

=== ケース1: リリース時に、ビルドが正常になるまで時間がかかる（いつチェックアウトしてもビルドできませんが？）

最初の問題は、開発リポジトリのビルドが安定していませんでした。
当時の開発者は、こんな風に開発をしていたと思います。

 1. 開発着手時に、最新の開発環境をチェックアウトする
 2. ビルドに失敗したら、最低限の修正で動く状態にする。
 3. 自分の開発が済んで、最新の開発リポジトリと衝突することがなければ、チェックアウトすることなくコミットする。

最新の開発リポジトリは修正しなければいけない箇所が蓄積されていくため、リリース時に修正対応を行うことで、結果的にテスト工数が少なくなりますよね。

これを解決するために「自動ビルド環境を構築」しました。また「開発者が最新の開発リポジトリで確認する」ようにすることで、下図のように変わりました。

//image[branch1][ケース1とカイゼン後のブランチ][scale=0.8]{
//}

今振り返ると、テスト工数については改善しなかったかもしれません。
なぜならば、開発リポジトリのビルドが安定したことで余裕ができたことで、前より多く機能追加できるようになったためです。
結果として、リリース対象が大きくなったので、テスト工数はより足りなかったのではないかと思います。

=== ケース2: デグレードのリスクがある（リファクタリング詐欺を許すな）

2つ目の問題として、機能不足や挙動が変わるといった、デグレード発生のリスクがありました。
以下のような要因が考えられます。

 1. 機能追加を繰り返し、設計が分かりにくくなると「リファクタリング」し始める。
 2. リグレッションテストをせず、簡単な確認しかしない

ここで注意してもらいたいことは、テスト駆動開発などの文脈におけるリファクタリングの意味で使っていないという点です。

「リファクタリングしてます。」という報告をしておけば、周りには内部設計を改善していると思わせて開発の遅れを正当化しようとしてるのです。
私はこれを「リファクタリング詐欺」と呼んでいました(笑)。

デグレードするリスクを抱えたままですから、リリース時のテストが不十分と言えますよね。

//image[branch2][ケース2とカイゼン後のブランチ][scale=0.8]{
//}

当時の私は、テスト自動化至上主義でした(笑)ので、「リグレッションテストをしない」を「自動テストを追加する」文化に変えようと思いました。
まずは、簡単に確認できるところから自動テストを追加していきました。
また、小さく機能分割していき、ユニットテストできる設計に変えていきました。
不具合の原因を特定しやすくなったため、デグレードするリスクがあったとしても、結果的重点的にテストする箇所を絞り込めるようになったと思います。

ただし、自分の目的である「自動テストを追加する」文化には変化しませんでした。
その理由として、「リグレッションテストをしない」でも問題がない状況だったのではないかと推測しています。
例えば、「設計が枯れた」ことによって「リファクタリングが行われなくなった」としたら、図中の破線を結ぶ箱同士には因果関係がなくなりますので、リグレッションテストは行わなくてもよくなります（実際は頻度が少なくなった程度でしょうが）。

=== ケース3: メンテナンスされないテストケース

3つ目の問題として、テストケースがメンテナンスされていないことが挙げられます。
ある時期から、複数の開発プロジェクトが同時進行するようになりまし。

複数のプロジェクトで効率的に開発するために、ソースコードを再利用するなどの工夫が求められて行きました。
その考えはテストについても同じだと思いますが、テストケースは再利用するようなことはなく、そのたびにテストケースが作成されました。

テストケースの作成に工数が必要なので、結果としてテストケースの工数が少なくなりますよね。


//image[branch3][ケース3とカイゼン後のブランチ][scale=0.8]{
//}

そこで、過去のテストケースをメンテナンスし再利用できるようになるために、テストケース管理ツールを導入しました。

しかし、結果としては、テストケースを再利用する以前に、使い勝手の悪さが障害になりました。
また、見かけ上の工数だけで言ったら、EXCELを使ったCPM法の方がはるかに早い。
その後のテスト実施や不具合対応の工数はテストケース作った人の工数ではないのでね。

結局、あのテスト管理ツールは1回使って諦めましたよ。。。
個人的には2,3回は繰り返したくらいで効果が見えそうでしたけど、やっぱ使い勝手の悪さはインパクトでかいって(笑)

=== ケース4: 共通のスキルにする

最後のケース、「開発者がテストプロセスやテスト設計を知らない」「各自の方法でテストを実施している」です。

それぞれの結果として、リリース時のテストとしては不十分になりますよね。（なぜか？）

//image[branch4][ケース4とカイゼン後のブランチ][scale=0.8]{
//}

当時、ちょうど書籍になっていたTPI-NEXTを使えば「自分たちに足りないものを認識する」と思っていました。
一方で、テストの勉強会を実施すれば、「チームがテスト活動を理解する」。結果として、チームがテスト活動をカイゼンすると思っていました。

テストの勉強会でやったことは、
* 仕様書ベースのテストのためのテスト技法のワーク、
* テストアーキテクチャ(NGT/VSTeP)の紹介から、テストを計画するグループワーク、
* 開発の現状の問題を把握して、その後のテストの勉強会の課題を見つけるためのグループワーク(SaPID)

その後、SaPIDを使って、みんなで問題構造図を作って継続的なカイゼンを進めるのが、自分の思惑だったけど行われなかった。
時間が確保できなかった事と、開発予算の削減も重なり、立ち消えてしまった感じでした。。。

これについては、破線で示している通り、ここには至っていません。

アセスメント結果によって、やるべきはテスト計画だということが判明したのですが、
社内の各開発チームと一緒にアセスメントしたら、自分のグループの評価結果が比較的高かったんですよね。
それで自分たちが他のグループより優っていることに満足してしまったのか、結局、カイゼンには意識が向かいませんでした（お前ら意識低いなっ

また、勉強会によってテスト活動全般をざっくり理解したのと、ワークで効果は示せたと思いますが、
「工数が増えるだけかもしれない、効果があるか分からない」という感想がでましたね。
結局のところ、簡単に開発できてテストもしなくてよい『銀の弾丸』を求めていたのかもしれませんね（んなもんあるわけねーだろ）

== 今思うとどうなのか？

=== 「テスト工数が少ないから、テストが不十分」という思い込み

これだけで因果関係があやしい。

「テストは再利用すればいいし、自動化して効率化しなければいけない」と思っていましたが、本当に必要だったのでしょうか？

==== 実は、開発やテストの工数は確保されていた。

自動テストは書く必要がない。
一方で、学習に対する工数は確保しないので、新しいことを学ぶということはできない。

==== メトリクスがないと分からない

評価するものは、自分の工数だけだったので、その工数だけ考えればよい。
実行できない分かりにくいテストだろうが、その結果不具合が出ようが、自分の業務が解決すればいい

==== パーキンソンの法則に従う

どんなにテスト工数を確保したとしても、それはテストには使われない。
テストは苦手で分からないので、できることしかできない。
自分の得意な領域でだけ仕事を増やすようになる。

=== 「俺の言ってることは正しい（だからやるべき）」という思い込み

一般論、正論とは何か？

何かを変えようとするとき、多かれ少なかれ抵抗が起きます。

その際に「何が悪いのか？」「何を変えるべきなのか」を一般論でうまくいっているケースで説得します。
そうすることで、渋々でもやりはじめる。
効果がでると、こっちのもん。
効果がでなくても、アクションしたことを評価するべき。
そもそも、こっちのもんって考え方がいかんよね。（対問題になっていない）

一般論のケースが、うまくいった背景をちゃんと調べて検討する。

=== 「正論でも現実にそぐわない」という思い込み

TOCでは、抵抗心理を階層構造で表現されています。

//listnum[6 Layers of Registance][TOC抵抗の6層]{
問題の存在に合意しない
ソリューションの方向性に合意しない
ソリューションの問題を解決できると思わない
ソリューションを実行するとマイナスの影響が生じる
ソリューションの実行を妨げる障害がある
その結果起こる、未知のことへの恐怖
//}

実はほとんどの問題は第1層で起こってます。
例えば、テストの勉強会で出た意見に照らし合わせると、

 * 「ちゃんとテスト設計しても、今までより効果がでるとは思わない」(第3層)、
 * 「ちゃんとテスト設計したら、工数がかかる」(第4層)、

のように思えますが、本音は「自分なりに十分なテストをしているから、そんな問題は存在しない（他に問題があるはずだ）」(第1層)だと気づくべきなのです。

問題が存在していないはずなのに、何度も方法を変えられたら迷惑ですよね？
第1層の抵抗心理が大きくなってしまったら、人として相手にしたくなくなりますよね？(第0層とも呼ばれる)

今振り返ると、退職前はそんな状態だったのかもなぁ。。。（哀

== 今ならどうやる？

結局のところ、問題の存在に合意しない限り、無理にカイゼンしないなら。
少なくとも自分のところだけよくするかも。

問題の存在に合意していないことを前提として動くのなら、対策ができる。

=== 同じ立場の開発者やテストエンジニアが抵抗しているのであれば、

時間がかかっても、その人と一緒に作業をやってみるとよい。
その方法でも抵抗がおきるなら、まずは1人で同じ作業をやってみる。

自分でないと感じない不便さ、ストレスを感じるかもしれない
実は、その方法が当たり前で、変えられないことだと思っていたかもしれない

逆に、自分の感じていた問題と違っているかもしれない。

その時の手順やストレス、起きた感情などを、ブランチで描いてみて、ネガティブブランチで彼らの問題をカイゼンしていくこと。

=== 上司やステークホルダーがカイゼンに抵抗している場合、

過去の経験を大事にする彼らは、きっと自分と一緒に仕事をしてくれないだろう。

その場合は無理をしてカイゼンする必要もないと思う。

しかし、逆に、抜本的なカイゼンを提案をしてきて、指令を出すかもしれない。
その場合は、説明した内容と、上司の抵抗した意見、結果として上司から受けたカイゼン提案を、その場でブランチにしてみるかもしれない。
論理的にしっくりこないのなら、やってもしょうがない可能性がある。

それでもやれというかもしれない。
その場合は、お互いに達成したい目標が見えていない可能性がある。
それなら、TOCfEのクラウドを使ってみるとよい。
共通目標を見つけて、どちらがいいか考えてあげよう。

人によっては、彼らの考える方法以外の方法でやっても、納得しない人もいるかもしれない(そんな上司がいた)
いきなり、「実は、共通の目標があって、それに従っても、あまり必要がないです」って言っても納得いかないかも。

だとしたら、彼らに従うのもありだ。
アンビシャスターゲットツリー(Crab Ink 300参照)を作ってみるのもよい。
ただし、その提案を達成した暁に得たい目標も聞き出そう。
そのための障害を出して、どれだけアンビシャスかを伝える方がいい。

案外、相談相手になってくれたってだけで、満足してくれるかもしれないけどね。

=== まったくの赤の他人だった場合は

そもそも、お前が抵抗しているのはなぜなのか？、何が関係あるんだい？ってブランチで明らかにした方がいいね。
話はそれからだ。

== さいごに

ここまで、自分の経験を赤裸々に書くとは思わなかった。
うまくいかなかったことを因果関係に表すのは難しい。だって因果関係ないんだもん笑
恣意的になって恨み辛みを因果関係に盛り込むと、伝わりにくいブランチになっちゃう。

カイゼンするたびにブランチが変わっていて、そのたびに新しい真実が出てきたり、事象の内容が変わってくるので、過去の総決算としてブランチにするのは難しい。

締め切りギリギリまで書く内容が決まらなかったよ。

ただ、今回、前職での出来事をふりかえって、失敗談を形にできたのはよかった。
これから、カイゼンしたいジャーニーに向かっていける

みなさんの参考になればいいと思うし、もしくは小ばかにしてもいいかな。
