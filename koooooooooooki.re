= カイゼンしなかったジャーニーをふりかえる

//info{
著者：@koooooooooooki
//}

//lead{
自分が良かれと思っていたカイゼンが，うまくいかないことで悩んだことはありませんか?
また「あの時，ああやっておけば・・・」みたいに後悔することはありませんか?

今回，筆者が行ってきたカイゼンと成果(むしろ失敗)を赤裸々にふりかえり，今後はどうやっていきたいか考えてみました．
//} 

== はじめに

今回紹介する事例は，2011年6月~2019年12月まで勤めた，いわゆる組み込み系ソフトの開発会社での活動の一部になります．
ソフトウェアのQA部門がなかったため，開発チームがテストして責任をもってリリースしていました．

オブジェクト指向開発のような開発手法やテスト駆動開発を知っている人があまりいない職場で，そういった手法を導入することを期待されてたと思います．

今ふりかえると，突飛で周りに迷惑かけたのかなぁ・・・
だって，開発を良くすることを求められてるのにテスト活動をカイゼンしようなんて，ふつー思わないでしょう?(笑)．

知識も経験もない，相談相手もいない中で試行錯誤してきたけど，
「今の自分が俯瞰したら過去の自分がやってきた事をふりかえったら，いったい何が見えるんだろう?」
と，離職した今だからこそふりかえってみようと思いました．

=== 今回使う思考ツール

今回は，TOCfEのロジックブランチ(以下，ブランチ)を使います．
ブランチは，@<b>{原因と結果の因果関係を，箱と矢印を使って見える化する}思考ツールです．

ペンと付箋があれば，次の手順で作ることができます．

//listnum[Procedure for Branch][ブランチ作成手順]{
起こった出来事を，１つずつ付箋に書きだす．
書き出した付箋を，原因と結果の関係で下から上方向に順番に並べる．
「もし(原因)であれば，結果として(結果)である．」と声に出して読んでみて，違和感がなければ矢印で結ぶ．原因が複数ある場合は「もし(原因1)かつ(原因2)であれば，結果として...」のように，「かつ」を使って読む．
違和感があれば，付箋の内容を書き換えたり，原因となる付箋を足したり，付箋の順番を変えたりする．
//}

ブランチにすると，何が原因で起きているか明確ですよね．
結果を直接対応するのではなく，根本原因を突き止めて対策することで，結果が起こらないようにできますよね^^

== 壮大にふりかえってみたよ!!

と言っても，やったことは大小さまざまで，すべてをブランチに描くととんでもない時間を使うし，紙面ではとても表現しきれなくなっちゃう>_<

そこで，今回はテストに対するいくつかのカイゼンに限定しています．

//image[branch][開発プロジェクトのブランチ][scale=1]{
//}

実際にカイゼンしていた当時は，目の前にある問題ばかり着目してましたが，実際のところ結果的にどんな問題が起きるのか考えてみました．

 * リリース時にテスト工数が少なくなる(チームメンバーは「対応する工数がありません」と言っている)．
 * リリース時のテストが不十分になる(複合要因ではなく，様々な原因がある)．
 * もしテストが不十分で，変更箇所に不具合があるのなら，客先で不具合が発見される．

どれも客先での不具合に帰着しそうですね．

ここから，それぞれのカイゼンについてふりかえってみます．

=== ケース1: 「いつチェックアウトしても，ビルドができないんですけど・・・」

これは，2012年ごろに初めてカイゼンした問題ですね．
前職の前の会社のチームでは，誰かが気づいてすぐ直していたから，こんな無秩序なチームは初めてでしたよ．
こんな風に開発してたからだと思うけど，CI/CDが主流な今ではありえないですよねw

 1. 開発者は，機能を追加・修正する際，最新の開発環境をチェックアウトする．
 2. もし最新の環境でビルドに失敗したら，最低限の修正で動く状態にする．
 3. 修正が完了し簡単な動作確認が済んだら，最新をチェックアウトせずに，自分の開発範囲だけコミットする．
 4. リリースする際に，最新環境でビルドが成功するよう修正する工数が発生し，テスト工数が少なくなる．

これを解決するために『自動ビルド環境を構築』して『開発者が最新の開発リポジトリで確認する』ようにしたんですね．
その結果，次の図のようなブランチに変わりました．

//image[branch1][ケース1とカイゼン後のブランチ][scale=0.8]{
//}

今ふりかえると，結局テスト工数は改善しなかったのかなぁ・・・
というのも，開発リポジトリのビルドが安定したことで確保された工数で，前より多く機能追加できるようになったからですね．
結果としてリリース対象の機能が増え，よりテスト工数が足りなくなったのかもしれないです．

=== ケース2: 「リファクタリングって言えば許されると思ってるでしょ?!」

2つ目の問題として，リファクタリングした結果，機能不足や挙動が変わるといったデグレードが発生していました．
デグレードする時って，大体こんな感じで変更してるんですよね．

 1. 機能追加を繰り返す(大体2, 3回くらい)．
 2. 設計が分かりにくくなると『リファクタリング』し始める．
 3. テストケースがないため回帰テストできないし，そもそも修正工数を確保していないので簡単な動作確認しかしない．

気づいた方もいると思いますが，彼らの言ってる『リファクタリング』は，テスト駆動開発におけるリファクタリングではありません．
開発が遅れてでも自分の納得がいく設計に変える事を正当化するために「リファクタリングしてます．」と報告しているだけなのです．
私はこれを『リファクタリング詐欺』と揶揄していました．

もし，あなたの周りにそんな人がいたら「なんでテストしないんですか?」「ちゃんとテストしてくださいよ．」と言ってみてください．
きっと「テストが組み合わせ爆発するから，そんな事できるわけがない．」って，それぐらい分かんないの?アホなの?って勢いで返ってくるはずです(笑)

余談を挟んでしまいましたが，デグレードするリスクを抱えたままですから，リリース時のテストが不十分と言っていいでしょう．

//image[branch2][ケース2とカイゼン後のブランチ][scale=0.8]{
//}

当時の私はテスト自動化原理主義者だったので『回帰テストをしない』を『自動テストを追加する』文化に変えてデグレードをなくそうと考えました．
とは言っても，チームにそんなパラダイムシフトがいきなり起きるわけないので，まずは小さく機能分割してテスタブルな設計に変えていきました．
効果さえ出れば，いつかみんなが自動テストをやってくれると思って・・・

結果的に『自動テストを追加する』文化にはなりませんでした．まぁ当然ですよね(笑)．
むしろ『機能分割して，テスタブルに再設計・保守するユニットテスト職人』といった，ちゃんと開発もテストもやってるのに他と比べて評価されないロールが生まれたくらい(苦笑)．
あの時は「適度に不具合を出した方がいいのかなぁ・・・」と本気で思ってた(笑)．

まぁ，今ふりかえると，もしかしたら『回帰テストをしない』でも，問題がない状況だったのかもしれないですね．
例えば，設計が枯れて『リファクタリング』が行われなくなったなら，図中の破線は消えてデグレードが起こらなくなります(実際は頻度が減ったぐらいでしょうが)．

期待していた効果はでなかったけど，デグレードのリスクは残っていても，リスクに絞り込んで重点的にテストができるようになったかもしれません．
それくらいの成果があったと思いたい(笑)．

=== ケース3: 「おじいちゃん，そのテストケース，さっき書いたでしょ?」

初めに言い訳しておくと，これは自分の中でも黒歴史中の黒歴史，失敗中の失敗と言ってもいいくらいだ．

1チームが2つのプロジェクトを掛け持ちして並行開発したときだ．
自分は，1チームのプロジェクトリーダー兼開発者兼テスター(肩書多すぎ)をしてた時のことだ．

リリース時期もほぼ同じだったので，ソースコードを再利用するなどして効率的よく開発する必要が出てきた．
まぁ，ケース2で紹介した『ユニットテスト職人』の仕事の成果は効果てきめんでしたよ(にやり)

自分は，ソースコードの再利用と同じように，テストケースを効率よく作りたいと思い，テスト管理ツールを導入してみたんだ．

//image[branch3][ケース3とカイゼン後のブランチ][scale=0.8]{
//}

最初に書いた通り，これは失敗だった．
テストケースを再利用する以前に，使い勝手の悪さが障害だった．

また，見かけ上の工数だけで言ったら，今まで通りEXCELを使ったCPM法をやった方がはるかに早かった．
その後のテスト実施や発生した不具合対応は，テストケース作った人の責任にならないからねぇ．

結局，あのテスト管理ツールは1回使って捨てたよ・・・
個人的には2,3回は繰り返したくらいで効果が出てきそうだったけど，あの使い勝手の悪さだけで台無し(笑)

=== ケース4: 「そんな都合のいいもん，あるわけねーだろjk」

何度も失敗してると，さすがに自動化やツールを使っただけじゃ，カイゼンできない事に気づいた．
いや，正確には，それらの背景にある思想が理解されない限り使いこなすことができないんだろうな，と思ったよ．


さて，最後は，テストに関する共通認識をチームが持たせるカイゼンになります．

まずは，『各自の方法でテストを実施している』は，テストの十分性に何かしらの影響があると思うのですが，誰も善し悪しが分からない，カイゼン方法も良し悪しが分からない．
そこで，当時ちょうど書籍になっていたTPI-NEXTを使えば『自分たちに足りないものを認識できる』と思いました．

一方で『開発者がテストプロセスやテスト設計を知らない』のに，しっかりしたテストなんて普通できるわけないよね?
『チームがテスト活動を理解する』ためにテストの勉強会を実施しました．

//image[branch4][ケース4とカイゼン後のブランチ][scale=0.8]{
//}

結局これも，図中の破線が結果につながらずに終わったんだよね(苦笑)

TPI-NEXTは，社内の他の開発チームと一緒にアセスメントしたら，自分のグループの評価結果が比較的高かったんですよね．
それで，他のグループより優っていることに満足してしまったのか，カイゼンには意識が向かなかったんですよね．
テスト計画からカイゼンするべきって事は判明したんですけど．
ほんと，とんだ団栗の背比べだったぜ．

一方，テストの勉強会は，かなりの時間準備して頑張ったんだよ(自画自賛)

 * 仕様書ベースのテストのためのテスト技法のワーク．
 * テストアーキテクチャ(NGT/VSTeP)の紹介から，テストを計画するグループワーク．
 * 開発の現状の問題を把握して，その後のテストの勉強会の課題を見つけるためのグループワーク(SaPID)．

でもね，勉強会の結果「工数が増えるだけかもしれない，効果があるか分からない」という感想が出てきた時，
結局のところ，簡単に開発ができてテストもしなくてよい『銀の弾丸』を求めてるんだなぁと感じ取ったわ．
んなもんあるわけねっつーの#

== 結局，何がいけなかったんだろう?

当時をふりかえってブランチを描いてみたら，様々な思い込みがあったことが判明しました．
思い込みのあるところって，因果関係のおかしな文章が多くて気持ち悪さしかない^^;;

=== 『テスト工数が少ない』という思い込み

「工数が少ないんだから，自動化して効率化しよう，テストを再利用しよう．」と思ってたけど，本当にテスト工数が少なかったのかな?
疑ってるわけじゃないよ?
でも，あの人が切実に言ってたから信じていたけど，本当にそうだったのかな?

==== 実は開発やテストの工数は十分に確保されている

十分な予算が確保されている，もしくは予算を気にしなくてもいいから，再利用や自動化をする必要がないんだろう．
一方で，学習するための工数，新しいことをする工数は確保していない．
だから「工数が少ない」と言ってるのは『別のやり方でやる工数は想定していない』ってことなんだ．

==== パーキンソンの法則に従う@<fn>{law}
//footnote[law][仕事の量は、完成のために与えられた時間をすべて満たすまで膨張する]

ケース1であったように，ボトルネックをカイゼンしてテスト工数を確保しても，ギリギリまで機能追加に使われた．
いくら製品リリースのために必要な工程だとしても，テストが苦手で興味がないんだったら，パフォーマンスは期待しない方がいいかもね．

=== 『正しいことなら，周りも行動してくれる』という思い込み

何かを変えようとするとき，多かれ少なかれ抵抗が出る．
正しいことなら，みんなが動いてくれると思ったら大間違いだぜ．

TOCでは，抵抗心理を階層構造で表現している．

//listnum[6 Layers of Registance][TOC抵抗の6層]{
問題の存在に合意しない
ソリューションの方向性に合意しない
ソリューションの問題を解決できると思わない
ソリューションを実行するとマイナスの影響が生じる
ソリューションの実行を妨げる障害がある
その結果起こる，未知のことへの恐怖
//}

ほとんどの抵抗は第1層だと思った方がいいよ，これマジで．

例えば，ケース4のテストの勉強会で出た意見に照らし合わせると

 * 「ちゃんとテスト設計しても，今までより効果がでるとは思わない」(第3層)
 * 「ちゃんとテスト設計したら，工数がかかる」(第4層)

って，うまく当てはまってるっぽいけど，実は周りに忖度してるだけだからな!

本音は，

「自分なりに十分なテストをしているから，自分たちのやり方に問題はない（問題があるなら，他のところにあるはずだ）」(第1層)

って言いたいことに気づくべきなんだ．

もし，問題が存在していないと思ってるのに，カイゼンと称して何度もやり方を変えられたら迷惑だよね?
その結果，第1層の抵抗心理が大きくなってしまったら，最終的に近寄りたくない存在になっちゃうのかも．

あぁ，そうか・・・今振り返ると，離職前の自分ってそんな状態だったのか・・・(驚愕の事実判明)

== なんかエモいんだけど・・・

これからも懲りずにカイゼンするなら，今度は，相手が『問題の存在に合意していないこと』を前提に行動するなぁ．

カイゼン実施の判断は『問題の存在を合意するか』だけで決めてみようかなって．
もし相手が問題の存在に合意していないなら，そもそも効果のあるカイゼンにならないんじゃないかな?，と今は思ふ．

そのためには，どんな相手でも理解していくことが大事．
立場や状況で自分の理解の仕方が変わることに気を付けたい．

=== 同じ立場の開発者やテストエンジニアが抵抗している場合

その人にとっていかに良いカイゼンかを伝える前に，まずは，その人がなぜ抵抗しているのかを聞くことから始めたい．

話を聞いているうちに，自分の中で咀嚼できないことが出てくるかもしれない．
きっと，自分の思い込みが理解の邪魔をしていたり，『当然知っている』と思っている思い込みがあるからかもしれない．

もし可能なら同じ作業を自分でやってみるといいね．できれば一緒にやるのがいいかも．
自分でやっているうちに，自分でないと感じない不便さ，ストレスを感じてくる．
実は，その不便さやストレスは，相手にとって普通のことだと思っていたかもしれない．
もしくは，実際にやってみたら，自分が思っていた問題とは違う，彼らの問題に気づくかもしれない．

そうやって一緒に作業した時の手順や起きた感情・ストレスを，ブランチに描いてみて相手と共有できればよいかもね．

=== 上司やステークホルダーが抵抗している場合

同じ立場の人とは違って，彼らにはもっと慎重に対応した方がいい．
理由は，あなたも知ってるだろう?笑．

上司が抵抗しているなら，無理してカイゼンしなくてもいいと思う．
しかし，そうも行かないのが社会人の常だ．
こっちが「(西川き〇しのマネしながら)小さな事からコツコツと!!」って提案してるのに，彼らは抜本的な変更を提案してくるんだ．
「そもそも，これが問題なのに，なぜやらないんだ?」とか言ってね．お前は俺か?

そんな時は，自分の提案内容と上司の意見，上司の抜本的な変更を，その場でブランチに描いてみるといい．
論理的にしっくりこないなら，やる必要はないかもね．

でも，たいていの上司は「やらなきゃ分からないじゃないか?!」とか言ってくるんだ．
そんなこと言われたからって「やらなきゃ分からない事は，やってみても分からないですよ?」ってカウンターしたらダメですよ?w

意見が対立しているってことは，お互い達成したい目標が見えていない可能性があるかもしれない．
それなら，TOCfEのクラウドを使ってみるとよい．
お互いの共通目標を見つけて，どちらがいいか考えてみよう．

これで偉い人対策も万全だ!!

いやいや，んなこたぁない．
残念だけど，自分の意見以外を認めない奴は多い．
そんな奴らは，カイゼンをしたいわけじゃなく，ただ自分の意見を通したいだけなんだ．

だとしたら，あえて彼らに従うのもありだ．
TOCfEのアンビシャスターゲットツリー(300 Multiple Choices参照)を作るよい．
せっかくなので，彼らの抜本的な変更を達成したことで得たい目標(キレイゴト)を聞き出して，ATTを作って共有してみるといい．
手の届かない高嶺の花だったときは，それを目指そうと頑張るくせに，手が届くと分かった途端に興味なくすこと請け合いだ!!

もし，そうじゃなかったとしても，カイゼンが進められたってことは，こっちの作戦勝ちなんだ．

=== まったくの赤の他人が抵抗している場合

えっと，お前は私と何の関係があるんだい?
なぜ，私の意見に抵抗しているんだい?
とりあえず，それをブランチに描いてみようか．
お前との話はそれからだ．

== さいごに

まず初めに・・・
正直，自分の過去の経験の大反省文を，ここまで赤裸々に書くとは思わなかったね笑．
ここまで大きなブランチを描くのは難しかった・・・お疲れ自分ｗ

うまくいかなかったことを因果関係に表すのは難しい．だって因果関係ないんだもん，そりゃ当然だ．
自分のことになると恨みつらみや思い込みが入ってしまい，出来上がったブランチはとても恥ずかしい．
何度もブランチを描きなおすことになって，〆切ギリギリまで書く内容が定まらなかったよ・・・

今回，JaSST'20 Tokyoのワークショップセッション「ステップアップしたいテストエンジニアのための思考トレーニング」の応用として，自分のふりかえりをやってみた形です．
もし実際にやってみる場合は，こんな風に壮大にふりかえるのではなく，小さくふりかえるところから始めてみましょう．

今回，前職での「カイゼンしなかったジャーニー」をふりかえり，形にすることができてよかった．
書く前までは落ちていた「カイゼンしたいジャーニー」のモチベーションが再び上がってきました．

みなさんの参考になればいいと思うし，こうしたらいいよって意見があればぜひ私に教えてください．